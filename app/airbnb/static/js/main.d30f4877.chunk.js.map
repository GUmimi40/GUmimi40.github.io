{"version":3,"sources":["scripts/index.js","scripts/views/index.js","App.js","serviceWorker.js","scripts/reducers/data.js","scripts/reducers/hotplace.js","scripts/reducers/story.js","scripts/reducers/login.js","scripts/reducers/index.js","store.js","index.js","utils/lazyload.js"],"names":["MainRoute","basename","component","Layout","Component","className","path","exact","render","to","LazyLoad","App","Boolean","window","location","hostname","match","defaultState","immutable","fromJS","wuhan","shanghai","changsha","chongqing","nanjing","chengdu","guangzhou","beijing","daban","dongjing","taibei","xianggang","jingdu","mangu","shouer","qingmai","hangzhou","dali","fangyuan","jingdian","meishi","wenhua","huodong","dianpu","status","copycode","reducers","combineReducers","data","state","action","type","set","sd","update","x","num","hotplace","story","login","code","store","createStore","applyMiddleware","thunk","promise","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","loadingComponent","loader","loading","Loadable"],"mappings":"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","file":"static/js/main.d30f4877.chunk.js","sourcesContent":["\r\nimport {HashRouter as Hash , Route} from \"react-router-dom\";\r\nimport { Layout } from \"./views\";\r\n\r\nexport class MainRoute extends Component{\r\n    render(){\r\n        return (\r\n            <Hash basename=\"/\">\r\n                <Route component={Layout}/>\r\n            </Hash>\r\n        )\r\n    }\r\n}","\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\nimport LazyLoad from \"&/lazyload\";\r\n\r\nexport class Layout extends Component{\r\n    render(){\r\n        return (\r\n            <div className=\"main\">\r\n                <Switch>\r\n                    <Route path=\"/\" exact render={()=>(<Redirect to=\"/index/tansuo\"/>)}/>\r\n                    <Route path=\"/guide\" component={LazyLoad(()=>import(\"./guide\"))}/>\r\n                    <Route path=\"/index/\" component={LazyLoad(()=>import(\"./app\"))}/>\r\n                    <Route path=\"/search\" component={LazyLoad(()=>import(\"./search\"))}/>\r\n                    <Route path=\"/houses\" component={LazyLoad(()=>import(\"./houses\"))}/>\r\n                    <Route path=\"/login\" component={LazyLoad(()=>import(\"./login\"))}/>\r\n                    <Route path=\"/account\" component={LazyLoad(()=>import(\"./account\"))}/>\r\n                    <Route path=\"/housedetail\" component={LazyLoad(()=>import(\"./housedetail\"))}/>\r\n                    <Route path=\"/storydetail\" component={LazyLoad(()=>import(\"./storydetail\"))}/>\r\n                    <Route path=\"/order\" component={LazyLoad(()=>import(\"./order\"))}/>\r\n                    <Route path=\"/orderdetail\" component={LazyLoad(()=>import(\"./orderdetail\"))}/>\r\n                    <Route path=\"/pay\" component={LazyLoad(()=>import(\"./pay\"))}/>\r\n                    <Route path=\"/chat\" component={LazyLoad(()=>import(\"./chat\"))}/>\r\n                    <Route render={()=>(<Redirect to=\"/index/tansuo\"/>)} />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { MainRoute } from './scripts';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <MainRoute></MainRoute>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import immutable from \"immutable\";\r\n\r\nconst defaultState = immutable.fromJS({\r\n    wuhan:[],\r\n    shanghai:[],\r\n    changsha:[],\r\n    chongqing:[],\r\n    nanjing:[],\r\n    chengdu:[],\r\n    guangzhou:[],\r\n    beijing:[],\r\n    daban:[],\r\n    dongjing:[],\r\n    taibei:[],\r\n    xianggang:[],\r\n    jingdu:[],\r\n    mangu:[],\r\n    shouer:[],\r\n    qingmai:[],\r\n    hangzhou:[],\r\n    dali:[]\r\n})\r\n\r\nexport const data = (state=defaultState,action)=>{\r\n    switch(action.type){\r\n        case \"大理\":\r\n            return state.set(\"beijing\",action.sd);\r\n            break;\r\n        case \"杭州\":\r\n            return state.set(\"beijing\",action.sd);\r\n            break;\r\n        case \"北京\":\r\n            return state.set(\"beijing\",action.sd);\r\n            break;\r\n        case \"上海\":\r\n            return state.set(\"shanghai\",action.sd);\r\n            break;\r\n        case \"成都\":\r\n            return state.set(\"chengdu\",action.sd);\r\n            break;\r\n        case \"重庆\":\r\n            return state.set(\"chongqing\",action.sd);\r\n            break;\r\n        case \"南京\":\r\n            return state.set(\"nanjing\",action.sd);\r\n            break;\r\n        case \"武汉\":\r\n            return state.set(\"wuhan\",action.sd);\r\n            break;\r\n        case \"广州\":\r\n            return state.set(\"guangzhou\",action.sd);\r\n            break;\r\n        case \"长沙\":\r\n            return state.set(\"changsha\",action.sd);\r\n            break;\r\n        case \"testing\":\r\n            return state.update(\"count\",x=>{\r\n                return x+action.num;\r\n            });\r\n            break;\r\n\r\n        default:\r\n            return state;\r\n            break;\r\n    }\r\n}","import immutable from \"immutable\";\r\n\r\nconst defaultState = immutable.fromJS({\r\n    shanghai:[],\r\n    chongqing:[],\r\n    chengdu:[],\r\n    beijing:[],\r\n    hangzhou:[],\r\n    dali:[]\r\n})\r\n\r\nexport const hotplace = (state=defaultState,action)=>{\r\n    switch(action.type){\r\n        case \"大理hot\":\r\n            return state.set(\"dali\",action.sd);\r\n            break;\r\n        case \"杭州hot\":\r\n            return state.set(\"hangzhou\",action.sd);\r\n            break;\r\n        case \"北京hot\":\r\n            return state.set(\"beijing\",action.sd);\r\n            break;\r\n        case \"上海hot\":\r\n            return state.set(\"shanghai\",action.sd);\r\n            break;\r\n        case \"成都hot\":\r\n            return state.set(\"chengdu\",action.sd);\r\n            break;\r\n        case \"重庆hot\":\r\n            return state.set(\"chongqing\",action.sd);\r\n            break;\r\n        default:\r\n            return state;\r\n            break;\r\n    }\r\n}","import immutable from \"immutable\";\r\n\r\nconst defaultState = immutable.fromJS({\r\n    fangyuan:[],\r\n    jingdian:[],\r\n    meishi:[],\r\n    wenhua:[],\r\n    huodong:[],\r\n    dianpu:[]\r\n})\r\n\r\nexport const story = (state=defaultState,action)=>{\r\n    switch(action.type){\r\n        case \"房源\":\r\n            return state.set(\"fangyuan\",action.sd);\r\n            break;\r\n        case \"景点\":\r\n            return state.set(\"jingdian\",action.sd);\r\n            break;\r\n        case \"美食\":\r\n            return state.set(\"meishi\",action.sd);\r\n            break;\r\n        case \"文化\":\r\n            return state.set(\"wenhua\",action.sd);\r\n            break;\r\n        case \"活动\":\r\n            return state.set(\"huodong\",action.sd);\r\n            break;\r\n        case \"店铺\":\r\n            return state.set(\"dianpu\",action.sd);\r\n            break;\r\n        default:\r\n            return state;\r\n            break;\r\n    }\r\n}","import immutable from \"immutable\";\r\n\r\nconst defaultState = immutable.fromJS({\r\n    status:1,\r\n    copycode:\"\"\r\n})\r\n\r\nexport const login = (state=defaultState,action)=>{\r\n    switch(action.type){\r\n        case \"one\":\r\n            return state.set(\"status\",2);\r\n            break;\r\n        case \"two\":\r\n            return state.set(\"status\",3);\r\n            break;\r\n        case \"three\":\r\n            return state.set(\"status\",1);\r\n            break;\r\n        case \"code\":\r\n            return state.set(\"copycode\",action.code);\r\n            break;\r\n        default:\r\n            return state;\r\n            break;\r\n    }\r\n}","\r\nimport {combineReducers} from \"redux-immutable\";\r\nimport { data } from \"./data\";\r\nimport { hotplace } from \"./hotplace\";\r\nimport { story } from \"./story\";\r\nimport { login } from \"./login\";\r\n\r\nexport const reducers = combineReducers({\r\n    data,\r\n    hotplace,\r\n    story,\r\n    login\r\n})","import {createStore , applyMiddleware} from \"redux\";\r\nimport { reducers } from \"@/scripts/reducers\";\r\n\r\nimport thunk from \"redux-thunk\";\r\nimport promise from \"redux-promise\";\r\n\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunk,promise));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@/styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport Loadable from \"react-loadable\";\r\n\r\nconst loadingComponent =()=>{\r\n    return (\r\n        <div></div>\r\n    )\r\n}\r\n\r\nexport default (loader,loading = loadingComponent)=>{\r\n    return Loadable({\r\n        loader,\r\n        loading\r\n    });\r\n}"],"sourceRoot":""}